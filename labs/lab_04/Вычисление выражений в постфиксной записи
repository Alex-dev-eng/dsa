def evaluate_postfix(expression: str) -> float:
    """
    Вычисляет значение выражения в обратной польской записи.
    
    Args:
        expression: Строка с выражением в постфиксной записи
        
    Returns:
        float: Результат вычисления
    """
    stack = ArrayStack()
    operators = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '/': lambda x, y: x / y
    }
    
    for token in expression.split():
        if token.isdigit():  # Число
            stack.push(float(token))
        elif token in operators:  # Оператор
            if len(stack) < 2:
                raise ValueError("Недостаточно операндов для операции")
            
            right = stack.pop()
            left = stack.pop()
            result = operators[token](left, right)
            stack.push(result)
        else:
            raise ValueError(f"Неизвестный токен: {token}")
    
    if len(stack) != 1:
        raise ValueError("Некорректное выражение")
    
    return stack.pop()

# Тестирование
def test_postfix_evaluator():
    """Тестирование вычисления постфиксных выражений."""
    test_cases = [
        ("3 4 +", 7),
        ("5 1 2 + 4 * + 3 -", 14),
        ("2 3 * 4 +", 10),
        ("10 2 /", 5),
        ("4 2 5 * + 1 3 2 * + /", 2)
    ]
    
    print("\n=== ВЫЧИСЛЕНИЕ ПОСТФИКСНЫХ ВЫРАЖЕНИЙ ===")
    for expression, expected in test_cases:
        try:
            result = evaluate_postfix(expression)
            status = "✓" if abs(result - expected) < 1e-9 else "✗"
            print(f"{status} '{expression}' = {result} (ожидалось: {expected})")
        except Exception as e:
            print(f"✗ '{expression}' -> Ошибка: {e}")
