class ArrayDeque(Deque):
    """Дек на основе массива с кольцевой организацией."""
    
    def __init__(self, capacity: int = 10):
        self._capacity = capacity
        self._data = [None] * capacity
        self._front = 0
        self._rear = 0
        self._size = 0
    
    def push_front(self, item: Any) -> None:
        """Добавление в начало - O(1)*"""
        if self._size == self._capacity:
            self._resize(2 * self._capacity)
        
        self._front = (self._front - 1) % self._capacity
        self._data[self._front] = item
        self._size += 1
    
    def push_back(self, item: Any) -> None:
        """Добавление в конец - O(1)*"""
        if self._size == self._capacity:
            self._resize(2 * self._capacity)
        
        self._data[self._rear] = item
        self._rear = (self._rear + 1) % self._capacity
        self._size += 1
    
    def pop_front(self) -> Any:
        """Удаление из начала - O(1)"""
        if self.is_empty():
            raise IndexError("Pop from empty deque")
        
        item = self._data[self._front]
        self._data[self._front] = None
        self._front = (self._front + 1) % self._capacity
        self._size -= 1
        
        if 0 < self._size < self._capacity // 4:
            self._resize(self._capacity // 2)
        
        return item
    
    def pop_back(self) -> Any:
        """Удаление из конца - O(1)"""
        if self.is_empty():
            raise IndexError("Pop from empty deque")
        
        self._rear = (self._rear - 1) % self._capacity
        item = self._data[self._rear]
        self._data[self._rear] = None
        self._size -= 1
        
        if 0 < self._size < self._capacity // 4:
            self._resize(self._capacity // 2)
        
        return item
    
    def peek_front(self) -> Any:
        """Просмотр начала - O(1)"""
        if self.is_empty():
            raise IndexError("Peek from empty deque")
        return self._data[self._front]
    
    def peek_back(self) -> Any:
        """Просмотр конца - O(1)"""
        if self.is_empty():
            raise IndexError("Peek from empty deque")
        return self._data[(self._rear - 1) % self._capacity]
    
    def is_empty(self) -> bool:
        """Проверка на пустоту - O(1)"""
        return self._size == 0
    
    def __len__(self) -> int:
        """Размер дека - O(1)"""
        return self._size
    
    def _resize(self, new_capacity: int) -> None:
        """Изменение размера массива - O(n)"""
        new_data = [None] * new_capacity
        for i in range(self._size):
            new_data[i] = self._data[(self._front + i) % self._capacity]
        
        self._data = new_data
        self._front = 0
        self._rear = self._size
        self._capacity = new_capacity
    
    def __repr__(self) -> str:
        elements = []
        for i in range(self._size):
            elements.append(str(self._data[(self._front + i) % self._capacity]))
        return f"ArrayDeque([{', '.join(elements)}])"
