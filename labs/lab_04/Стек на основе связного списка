class Node:
    """Узел для связного списка."""
    def __init__(self, data: Any):
        self.data = data
        self.next: Optional['Node'] = None

class LinkedListStack(Stack):
    """Стек на основе односвязного списка."""
    
    def __init__(self):
        self._head: Optional[Node] = None
        self._size = 0
    
    def push(self, item: Any) -> None:
        """Добавление элемента - O(1)"""
        new_node = Node(item)
        new_node.next = self._head
        self._head = new_node
        self._size += 1
    
    def pop(self) -> Any:
        """Удаление и возврат элемента - O(1)"""
        if self.is_empty():
            raise IndexError("Pop from empty stack")
        
        data = self._head.data
        self._head = self._head.next
        self._size -= 1
        return data
    
    def peek(self) -> Any:
        """Просмотр вершины - O(1)"""
        if self.is_empty():
            raise IndexError("Peek from empty stack")
        return self._head.data
    
    def is_empty(self) -> bool:
        """Проверка на пустоту - O(1)"""
        return self._head is None
    
    def __len__(self) -> int:
        """Размер стека - O(1)"""
        return self._size
    
    def __repr__(self) -> str:
        elements = []
        current = self._head
        while current:
            elements.append(str(current.data))
            current = current.next
        return f"LinkedListStack([{', '.join(reversed(elements))}])"
